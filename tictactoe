#include <stdio.h>
#include <map>
#include <vector>
#include <iostream>
#include <string>
#include <stack>

using namespace std;

#define ROW_NUMBER           6
#define COLLUMN_NUMBER       6
#define CELL_NUMBER          ROW_NUMBER * COLLUMN_NUMBER
#define BOARD_TOP            "âââŻââŻââŻââŻââŻââ\n"
#define BOARD_ROW_SEPERATOR  "âŁââżââżââżââżââżââ«\n"
#define BOARD_BOTTOM         "âââ·ââ·ââ·ââ·ââ·ââ\n"

class Point {
public:
    int x;
    int y;

    Point(int x, int y) {
        this->x = x;
        this->y = y;
    }
};


class Player {
public:
    string name;
    char stamp;

    Player(string name, char stamp) {
        this->name = name;
        this->stamp = stamp;
    }

    char render() {
        return this->stamp;
    }
};

class gameBoard {
private:
    Player* emptyToken;

    string renderRow(int rowNumber) {
        string row = "|";
        for (int j = 0; j < ROW_NUMBER; j++) {
            row = row + this->fieldList[j + CELL_NUMBER * rowNumber]->render() + "|";
        }
        return row + '\n';
    }

public:
    vector<Player*> fieldList;
    stack<Point> pastMovements;

    string render() {
        string boardRepresentation = BOARD_TOP + renderRow(0);
        for (int i = 1; i < ROW_NUMBER; i++) {
            boardRepresentation = boardRepresentation + BOARD_ROW_SEPERATOR + this->renderRow(i);
        }
        return boardRepresentation + BOARD_BOTTOM;
    }

    int addToken(int collumnNumber, int rowNumber, Player* token) {
        int postion = collumnNumber + CELL_NUMBER * rowNumber;
        if (collumnNumber >= COLLUMN_NUMBER || rowNumber >= ROW_NUMBER || fieldList[postion]->stamp != this->emptyToken->stamp) {
            return 1;
        }
        this->fieldList[postion] = token;
        pastMovements.push(Point(rowNumber, collumnNumber));
        return 0;
    }

    int moveBack() {
        if (this->pastMovements.empty()) {
            return 1;
        }
        Point pastMove = pastMovements.top();
        pastMovements.pop();
        this->fieldList[pastMove.y + CELL_NUMBER * pastMove.x] = emptyToken;
        return 0;
    }

    gameBoard() {
        this->emptyToken = new Player("", ' ');
        for (int i = 0; i < ROW_NUMBER * CELL_NUMBER; i++) {
            this->fieldList.push_back(emptyToken);
        }
    }

};

class winCheck {
public:
    vector<vector<Point>> possibleWinsConfigurations;

    winCheck(vector<vector<Point>> possibleWinsConfigurations) {
        this->possibleWinsConfigurations = possibleWinsConfigurations;
    }

    bool checkIfHeWon(gameBoard gameboard, Player player) {
        for (vector<Point> configuration : possibleWinsConfigurations) {
            int correctFields = 0;
            for (Point point : configuration) {
                if (gameboard.fieldList[point.y + CELL_NUMBER * point.x]->stamp == player.stamp) {
                    correctFields++;
                }
            }
            if (correctFields == configuration.size()) {
                return true;
            }
        }
        return false;
    }
};


int main() {
    int turn = 0;
    int movementsLeft = 0;
    vector<vector<Point>> winsConfigurations{
        vector<Point>{Point(0,0), Point(1,1), Point(2,2), Point(3,3), Point(4,4), Point(5,5)},
        vector<Point>{Point(5,0), Point(4,1), Point(3,2), Point(2,3), Point(1,4), Point(0,5)},
        vector<Point>{Point(0,0), Point(1,0), Point(2,0), Point(3,0), Point(4,0), Point(5,0)},
        vector<Point>{Point(0,1), Point(1,1), Point(2,1), Point(3,1), Point(4,1), Point(5,1)},
        vector<Point>{Point(0,2), Point(1,2), Point(2,2), Point(3,2), Point(4,2), Point(5,2)},
        vector<Point>{Point(0,3), Point(1,3), Point(2,3), Point(3,3), Point(4,3), Point(5,3)},
        vector<Point>{Point(0,4), Point(1,4), Point(2,4), Point(3,4), Point(4,4), Point(5,4)},
        vector<Point>{Point(0,5), Point(1,5), Point(2,5), Point(3,5), Point(4,5), Point(5,5)},
        vector<Point>{Point(0,0), Point(0,1), Point(0,2), Point(0,3), Point(0,4), Point(0,5)},
        vector<Point>{Point(1,0), Point(1,1), Point(1,2), Point(1,3), Point(1,4), Point(1,5)},
        vector<Point>{Point(2,0), Point(2,1), Point(2,2), Point(2,3), Point(2,4), Point(2,5)},
        vector<Point>{Point(3,0), Point(3,1), Point(3,2), Point(3,3), Point(3,4), Point(3,5)},
        vector<Point>{Point(4,0), Point(4,1), Point(4,2), Point(4,3), Point(4,4), Point(4,5)},
        vector<Point>{Point(5,0), Point(5,1), Point(5,2), Point(5,3), Point(5,4), Point(5,5)}
    };
    winCheck check(winsConfigurations);

    string playerName1;
    string playerName2;
    string stampPlayer1;  //najlepiej x lub o
    string stampPlayer2;

    int g; //g-oznacza game, czyli wybor gry
    cout << "W jaka gre chcesz zagrac?" << endl;
    cout << "Wpisz 1 jesli w kolko i krzyzyk lub 2 jesli w pentago" << endl;
    cin >> g;
    while (g != 1) {
        cout << "Taka gra nie zostala stworzona, wpisz jeszcze raz" << endl;
        cin >> g;
    }

    cout << "Wpisz imie pierwszego gracza" << endl;
    cin >> playerName1;
    cout << "Podaj znaczek pierwszego gracza" << endl;
    cin >> stampPlayer1;

    cout << "Wpisz imie drugiego gracza" << endl;
    cin >> playerName2;
    cout << "Podaj znaczek drugiego gracza" << endl;
    cin >> stampPlayer2;

    while (stampPlayer1 == stampPlayer2) {
        cout << "Podaj znaczek drugiego gracza" << endl;
        cin >> stampPlayer2;
    }

    map<string, Point> translationMap{
        {"q1", Point(2, 0)},
        {"q2", Point(2, 1)},
        {"q3", Point(2, 2)},
        {"q4", Point(1, 0)},
        {"q5", Point(1, 1)},
        {"q6", Point(1, 2)},
        {"q7", Point(0, 0)},
        {"q8", Point(0, 1)},
        {"q9", Point(0, 2)},
        {"q9", Point(0, 2)},

        {"w1", Point(2, 3)},
        {"w2", Point(2, 4)},
        {"w3", Point(2, 5)},
        {"w4", Point(1, 3)},
        {"w5", Point(1, 4)},
        {"w6", Point(1, 5)},
        {"w7", Point(0, 3)},
        {"w8", Point(0, 4)},
        {"w9", Point(0, 5)},

        {"a1", Point(5, 0)},
        {"a2", Point(5, 1)},
        {"a3", Point(5, 2)},
        {"a4", Point(4, 0)},
        {"a5", Point(4, 1)},
        {"a6", Point(4, 2)},
        {"a7", Point(3, 0)},
        {"a8", Point(3, 1)},
        {"a9", Point(3, 2)},

        {"s1", Point(5, 3)},
        {"s2", Point(5, 4)},
        {"s3", Point(5, 5)},
        {"s4", Point(4, 3)},
        {"s5", Point(4, 4)},
        {"s6", Point(4, 5)},
        {"s7", Point(3, 3)},
        {"s8", Point(3, 4)},
        {"s9", Point(3, 5)},
    };

    Player player1(playerName1, stampPlayer1[0]);
    Player player2(playerName2, stampPlayer2[0]);
    gameBoard gameBoard;

    cout << "Aby wygenerowac przykladowa plansze wpisz o, a jezeli chcesz grac od poczatku wpisz cokolwiek" << endl;
    string exampleGameBoard;
    cin >> exampleGameBoard;
    if (exampleGameBoard == "o") {
        gameBoard.addToken(0, 1, &player1); gameBoard.addToken(1, 1, &player1);
        gameBoard.addToken(1, 2, &player1); gameBoard.addToken(4, 0, &player1);
        gameBoard.addToken(3, 1, &player1); gameBoard.addToken(0, 3, &player1);
        gameBoard.addToken(1, 3, &player1); gameBoard.addToken(2, 4, &player1);

        gameBoard.addToken(1, 0, &player2); gameBoard.addToken(2, 1, &player2);
        gameBoard.addToken(4, 1, &player2); gameBoard.addToken(0, 4, &player2);
        gameBoard.addToken(1, 5, &player2); gameBoard.addToken(4, 4, &player2);
        gameBoard.addToken(4, 5, &player2); gameBoard.addToken(5, 5, &player2);
    }

    cout << "Aby otrzymac pomoc wpisz: h" << endl; //h-help
    while (movementsLeft < CELL_NUMBER) {
        cout << "Pierwszy gracz: " + player1.name << endl;
        cout << "Drugi gracz: " + player2.name << endl;
        cout << gameBoard.render() << endl;

        if (check.checkIfHeWon(gameBoard, player1)) {
            system("CLS");
            cout << "Gracz pierwszy wygral" << endl;
            break;
        }
        else if (check.checkIfHeWon(gameBoard, player2)) {
            system("CLS");
            cout << "Gracz drugi wygral" << endl;
            break;
        }

        string move;
        cin >> move;

        if (move == "h") {
            cout << "Aby wykonac ruch wpisz [q|w|a|s][1-9]" << endl;
            cout << "Aby zmienic znaczki wpisz z[1|2][znaczek]" << endl; // z1#
            cout << "Aby sie cofnac jeden ruch wstecz wpisz u" << endl;
            continue;
        }
        else if (move[0] == 'z' && move.size() >= 3 && move[2] != ' ') {
            if (move[1] == '1' && player2.stamp != move[2]) {
                player1.stamp = move[2];
            }
            else if (move[1] == '2' && player1.stamp != move[2]) {
                player2.stamp = move[2];
            }
            continue;
        }
        else if (move == "u") {
            system("CLS");
            int error = gameBoard.moveBack();
            if (error == 0) {
                movementsLeft--;
            }
            continue;
        }

        auto pos = translationMap.find(move);
        if (pos == translationMap.end()) {
            cout << "Niepoprawny ruch" << endl;
        }
        else {
            Point point = pos->second;
            int error;
            if (turn == 0) {
                error = gameBoard.addToken(point.y, point.x, &player1);
            }
            else if (turn == 1) {
                error = gameBoard.addToken(point.y, point.x, &player2);
            }
            system("CLS");
            if (error == 0) {
                movementsLeft++;
                turn = (turn + 1) % 2;
            }
            else {
                cout << "Niepoprawny ruch" << endl;
            }
        }
    }

    cout << "Koniec gry" << endl;

    cout << "Przegladaj ruchy poprzednie (wpisz p) i nastepne (wpisz n)" << endl;
    stack<Point> nextMoves;
    while (true) {
        string input;
        cin >> input;
        if (input == "n" && !nextMoves.empty()) {
            Point move = nextMoves.top();
            if (turn == 0) {
                gameBoard.addToken(move.y, move.x, &player1);
            }
            else if (turn == 1) {
                gameBoard.addToken(move.y, move.x, &player2);
            }

            nextMoves.pop();
            turn = (turn + 1) % 2;
            system("CLS");
            cout << gameBoard.render() << endl;
        }
        else if (input == "p" && !gameBoard.pastMovements.empty()) {
            nextMoves.push(gameBoard.pastMovements.top());
            gameBoard.moveBack();
            turn = (turn + 1) % 2;
            system("CLS");
            cout << gameBoard.render() << endl;
        }
    }

    return 0;
}
